What happens when you initialize a repository? Why do you need to do it?

	When a repository is initialized, a snapshot is taken of all the files in the directory. It must be done, because until a repository is initialized, the history of the files is not tracked, and commits cannot be made.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is the middle phase between the working directory and a respository. Before a repository is created, files are chosen from the working directory, and placed in the staging area to be sent together as one commit. This is valuable, because it allows a person to pick and choose from the directory, what they want committed.

How can you use the staging area to make sure you have one commit per logical
change?
	
	Once a logical change is made, you can send the file to the staging area to await being committed. While in the staging area, the file won't be changed if you do any other editing to the file before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches can help keep your history organized by allowing you to keep commits that may be for certain things, separated from the master branch. These branches help when you may want to try new things with the file, and don't want to mess up the original code.

How do the diagrams help you visualize the branch structure?

	Diagrams help me to see which commits are connected to which branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?